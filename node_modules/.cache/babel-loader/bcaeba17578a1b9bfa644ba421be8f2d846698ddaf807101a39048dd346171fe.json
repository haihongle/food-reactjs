{"ast":null,"code":"import moment from'moment';const calculateOrderTime=isoString=>{const futureDate=moment(isoString);const now=moment();if(futureDate.clone().add(30,'minutes').diff(now)<0){return'danger';}if(futureDate.clone().add(15,'minutes').diff(now)<0){return'warning';}return'fine';};const calculateInventoryTime=function(isoString,shelfLife){let warningThreshold=arguments.length>2&&arguments[2]!==undefined?arguments[2]:3;const futureDate=moment(isoString);const now=moment();const expirationDate=futureDate.clone().add(shelfLife,'days');console.log(futureDate,expirationDate);if(expirationDate.diff(now)<0){return'danger';}if(expirationDate.diff(now)<=warningThreshold*24*60*60*1000){return'warning';}return'fine';};const calculateTime={calculateOrderTime,calculateInventoryTime};export default calculateTime;","map":{"version":3,"names":["moment","calculateOrderTime","isoString","futureDate","now","clone","add","diff","calculateInventoryTime","shelfLife","warningThreshold","arguments","length","undefined","expirationDate","console","log","calculateTime"],"sources":["E:/project-exam/eProject---SEM-2/src/utils/CaculateTime.js"],"sourcesContent":["import moment from 'moment';\r\n\r\nconst calculateOrderTime = (isoString) => {\r\n\tconst futureDate = moment(isoString);\r\n\tconst now = moment();\r\n\r\n\tif (futureDate.clone().add(30, 'minutes').diff(now) < 0) {\r\n\t\treturn 'danger';\r\n\t}\r\n\tif (futureDate.clone().add(15, 'minutes').diff(now) < 0) {\r\n\t\treturn 'warning';\r\n\t}\r\n\treturn 'fine';\r\n};\r\n\r\nconst calculateInventoryTime = (isoString, shelfLife, warningThreshold = 3) => {\r\n\tconst futureDate = moment(isoString);\r\n\tconst now = moment();\r\n\tconst expirationDate = futureDate.clone().add(shelfLife, 'days');\r\n\tconsole.log(futureDate, expirationDate);\r\n\r\n\tif (expirationDate.diff(now) < 0) {\r\n\t\treturn 'danger';\r\n\t}\r\n\tif (expirationDate.diff(now) <= warningThreshold * 24 * 60 * 60 * 1000) {\r\n\t\treturn 'warning';\r\n\t}\r\n\treturn 'fine';\r\n};\r\n\r\nconst calculateTime = {\r\n\tcalculateOrderTime,\r\n\tcalculateInventoryTime,\r\n};\r\n\r\nexport default calculateTime;\r\n"],"mappings":"AAAA,MAAO,CAAAA,MAAM,KAAM,QAAQ,CAE3B,KAAM,CAAAC,kBAAkB,CAAIC,SAAS,EAAK,CACzC,KAAM,CAAAC,UAAU,CAAGH,MAAM,CAACE,SAAS,CAAC,CACpC,KAAM,CAAAE,GAAG,CAAGJ,MAAM,CAAC,CAAC,CAEpB,GAAIG,UAAU,CAACE,KAAK,CAAC,CAAC,CAACC,GAAG,CAAC,EAAE,CAAE,SAAS,CAAC,CAACC,IAAI,CAACH,GAAG,CAAC,CAAG,CAAC,CAAE,CACxD,MAAO,QAAQ,CAChB,CACA,GAAID,UAAU,CAACE,KAAK,CAAC,CAAC,CAACC,GAAG,CAAC,EAAE,CAAE,SAAS,CAAC,CAACC,IAAI,CAACH,GAAG,CAAC,CAAG,CAAC,CAAE,CACxD,MAAO,SAAS,CACjB,CACA,MAAO,MAAM,CACd,CAAC,CAED,KAAM,CAAAI,sBAAsB,CAAG,QAAAA,CAACN,SAAS,CAAEO,SAAS,CAA2B,IAAzB,CAAAC,gBAAgB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CACzE,KAAM,CAAAR,UAAU,CAAGH,MAAM,CAACE,SAAS,CAAC,CACpC,KAAM,CAAAE,GAAG,CAAGJ,MAAM,CAAC,CAAC,CACpB,KAAM,CAAAc,cAAc,CAAGX,UAAU,CAACE,KAAK,CAAC,CAAC,CAACC,GAAG,CAACG,SAAS,CAAE,MAAM,CAAC,CAChEM,OAAO,CAACC,GAAG,CAACb,UAAU,CAAEW,cAAc,CAAC,CAEvC,GAAIA,cAAc,CAACP,IAAI,CAACH,GAAG,CAAC,CAAG,CAAC,CAAE,CACjC,MAAO,QAAQ,CAChB,CACA,GAAIU,cAAc,CAACP,IAAI,CAACH,GAAG,CAAC,EAAIM,gBAAgB,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAE,CACvE,MAAO,SAAS,CACjB,CACA,MAAO,MAAM,CACd,CAAC,CAED,KAAM,CAAAO,aAAa,CAAG,CACrBhB,kBAAkB,CAClBO,sBACD,CAAC,CAED,cAAe,CAAAS,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}