{"ast":null,"code":"import{useEffect,useState}from'react';import ImExRecipeService from'../../../../services/accountantService/ImExRecipeService';import ServiceMethods from'../../../../utils/ServiceMethods';import*as Yup from'yup';import CustomTable from'../../../../components/custom-table/CustomTable';import CardHeader from'../../../../components/card-header/CardHeader';import CustomModalDetail from'../../../../components/custom-modal/CustomModalDetail';import CustomModalForm from'../../../../components/custom-modal/CustomModalForm';import Toast from'../../../../components/toast-message/ToastMessage';import MaterialService from\"../../../../services/warehouseServices/MaterialService\";import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";export default function ImExRecipe(_ref){let{repType}=_ref;const[imExRecipeList,setImExRecipeList]=useState([]);const[pageCount,setPageCount]=useState(null);const[detailData,setDetailData]=useState(null);const user=JSON.parse(localStorage.getItem('user'));const[pagination,setPagination]=useState({page:0,size:10});//fetch data for selecting materials\nconst[materialList,setMaterialList]=useState([]);const getMaterials=async page=>{try{const response=await MaterialService.getMaterials(page);if(response.success){setMaterialList(response.data);}else{Toast.error(response.message);}}catch(error){Toast.error(error);}};const paginate=_ref2=>{let{selected}=_ref2;setPagination({page:selected,size:10});};useEffect(()=>{getRecipeList();const materialPage={page:0,size:100};getMaterials(materialPage);},[pagination]);const getRecipeList=async page=>{try{const response=await ImExRecipeService.getList(page,repType);if(response.success){setImExRecipeList(response.data);setPageCount(Math.ceil(response.data.length/pagination.size));}else{Toast.error(response.message);}}catch(error){Toast.error(error);}};const createNewRecipe=async data=>{const recipeData={...data,repType:repType};await ServiceMethods.add(ImExRecipeService.createNew,recipeData,getRecipeList);};const getDetail=async id=>{const data=await ServiceMethods.detail(ImExRecipeService.getDetail,id);setDetailData(data);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(CustomModalForm,{title:'Import recipe',properties:[{label:'Responsible By',field:'responsibleBy',type:'number',validation:Yup.number().required('Responsible By is required'),className:'col-md-6'},{label:'Rep type',field:'repType',type:'select',options:[{label:'Import',value:'IMPORT'},{label:'Export',value:'EXPORT'}],validation:Yup.string().required('Report Type is required'),className:'col-md-6'},{label:'Supplier',field:'supplier',type:'text',className:'col-md-6'},{label:'Purpose',field:'purpose',type:'select',options:[{label:'BALANCING',value:'BALANCING'},{label:'BUSINESS',value:'BUSINESS'}],validation:Yup.string().required('purpose is required'),className:'col-md-6'},{label:'Description',field:'description',type:'text-area',className:'col-md-12'}],modalID:\"importRecipeModal\",tableFieldName:\"detailList\",detailProperties:[{label:'Material',field:'materialId',type:'select',options:materialList.map(material=>({value:material.id,// Use the material ID as the value\nlabel:material.name+' ('+material.unitType+')'// Use the material name as the display label\n})),validation:Yup.number().positive('Material ID is invalid').required('Material ID is required')},{label:'Quantity',field:'quantity',type:'number',validation:Yup.number().min(1).required('Quantity is required')},{label:'Factory Date',field:'factoryDate',type:'date'},{label:'Total Value',field:'totalValue',type:'number',validation:Yup.number()// .positive('Invalid total value')\n.required('Total Value is required')}],submitFunction:values=>createNewRecipe(values)}),/*#__PURE__*/_jsx(CustomModalDetail,{detailData:detailData}),/*#__PURE__*/_jsx(CardHeader,{pageCount:pageCount,paginateFunction:paginate,modalID:'#importRecipeModal',buttonName:'Create new recipe'}),/*#__PURE__*/_jsx(\"div\",{className:\"card-body\",children:/*#__PURE__*/_jsx(CustomTable,{data:imExRecipeList,actions:{detail:getDetail},hiddenFields:['id','createdBy','updatedBy','updatedAt','responsibleBy']})})]});}","map":{"version":3,"names":["useEffect","useState","ImExRecipeService","ServiceMethods","Yup","CustomTable","CardHeader","CustomModalDetail","CustomModalForm","Toast","MaterialService","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","ImExRecipe","_ref","repType","imExRecipeList","setImExRecipeList","pageCount","setPageCount","detailData","setDetailData","user","JSON","parse","localStorage","getItem","pagination","setPagination","page","size","materialList","setMaterialList","getMaterials","response","success","data","error","message","paginate","_ref2","selected","getRecipeList","materialPage","getList","Math","ceil","length","createNewRecipe","recipeData","add","createNew","getDetail","id","detail","children","title","properties","label","field","type","validation","number","required","className","options","value","string","modalID","tableFieldName","detailProperties","map","material","name","unitType","positive","min","submitFunction","values","paginateFunction","buttonName","actions","hiddenFields"],"sources":["C:/Users/ADMIN/Desktop/testproject/src/pages/cms/accountant/recipe/ImExRecipe.js"],"sourcesContent":["import {useEffect, useState} from 'react';\r\nimport ImExRecipeService from '../../../../services/accountantService/ImExRecipeService';\r\nimport ServiceMethods from '../../../../utils/ServiceMethods';\r\nimport * as Yup from 'yup';\r\nimport CustomTable from '../../../../components/custom-table/CustomTable';\r\nimport CardHeader from '../../../../components/card-header/CardHeader';\r\nimport CustomModalDetail from '../../../../components/custom-modal/CustomModalDetail';\r\nimport CustomModalForm from '../../../../components/custom-modal/CustomModalForm';\r\nimport Toast from '../../../../components/toast-message/ToastMessage';\r\nimport MaterialService from \"../../../../services/warehouseServices/MaterialService\";\r\n\r\nexport default function ImExRecipe({repType}) {\r\n    const [imExRecipeList, setImExRecipeList] = useState([]);\r\n    const [pageCount, setPageCount] = useState(null);\r\n    const [detailData, setDetailData] = useState(null);\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    const [pagination, setPagination] = useState({\r\n        page: 0,\r\n        size: 10,\r\n    });\r\n\r\n    //fetch data for selecting materials\r\n    const [materialList, setMaterialList] = useState([]);\r\n    const getMaterials = async (page) => {\r\n        try {\r\n            const response = await MaterialService.getMaterials(page);\r\n            if (response.success) {\r\n                setMaterialList(response.data);\r\n            } else {\r\n                Toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            Toast.error(error);\r\n        }\r\n    };\r\n\r\n    const paginate = ({selected}) => {\r\n        setPagination({\r\n            page: selected,\r\n            size: 10,\r\n        });\r\n    };\r\n    useEffect(() => {\r\n        getRecipeList();\r\n\r\n        const materialPage = {\r\n            page: 0,\r\n            size: 100,\r\n        };\r\n        getMaterials(materialPage);\r\n    }, [pagination]);\r\n\r\n    const getRecipeList = async (page) => {\r\n        try {\r\n            const response = await ImExRecipeService.getList(page, repType);\r\n            if (response.success) {\r\n                setImExRecipeList(response.data);\r\n                setPageCount(Math.ceil(response.data.length / pagination.size));\r\n            } else {\r\n                Toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            Toast.error(error);\r\n        }\r\n    };\r\n\r\n\tconst createNewRecipe = async (data) => {\r\n\t\tconst recipeData = {\r\n\t\t\t...data,\r\n\t\t\trepType: repType,\r\n\t\t};\r\n\t\tawait ServiceMethods.add(ImExRecipeService.createNew, recipeData, getRecipeList);\r\n\t};\r\n\r\n    const getDetail = async (id) => {\r\n        const data = await ServiceMethods.detail(ImExRecipeService.getDetail, id);\r\n        setDetailData(data);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <CustomModalForm\r\n                title={'Import recipe'}\r\n                properties={[\r\n                    {\r\n                        label: 'Responsible By',\r\n                        field: 'responsibleBy',\r\n                        type: 'number',\r\n                        validation: Yup.number().required('Responsible By is required'),\r\n                        className: 'col-md-6',\r\n                    },\r\n                    {\r\n                        label: 'Rep type',\r\n                        field: 'repType',\r\n                        type: 'select',\r\n                        options: [\r\n                            {\r\n                                label: 'Import',\r\n                                value: 'IMPORT',\r\n                            },\r\n                            {\r\n                                label: 'Export',\r\n                                value: 'EXPORT',\r\n                            }\r\n                        ],\r\n                        validation: Yup.string().required('Report Type is required'),\r\n                        className: 'col-md-6',\r\n                    },\r\n                    {\r\n                    \tlabel: 'Supplier',\r\n                    \tfield: 'supplier',\r\n                    \ttype: 'text',\r\n                    \tclassName: 'col-md-6',\r\n                    },\r\n                    {\r\n                        label: 'Purpose',\r\n                        field: 'purpose',\r\n                        type: 'select',\r\n                        options: [\r\n                            {\r\n                                label: 'BALANCING',\r\n                                value: 'BALANCING',\r\n                            },\r\n                            {\r\n                                label: 'BUSINESS',\r\n                                value: 'BUSINESS',\r\n                            }\r\n                        ],\r\n                        validation: Yup.string().required('purpose is required'),\r\n                        className: 'col-md-6',\r\n                    },\r\n                    {\r\n                        label: 'Description',\r\n                        field: 'description',\r\n                        type: 'text-area',\r\n                        className: 'col-md-12',\r\n                    },\r\n                ]}\r\n                modalID=\"importRecipeModal\"\r\n                tableFieldName=\"detailList\"\r\n                detailProperties={[\r\n                    {\r\n                        label: 'Material',\r\n                        field: 'materialId',\r\n                        type: 'select',\r\n                        options: materialList.map(material => ({\r\n                            value: material.id,  // Use the material ID as the value\r\n                            label: material.name + ' (' + material.unitType + ')' // Use the material name as the display label\r\n                        })),\r\n                        validation: Yup.number()\r\n                            .positive('Material ID is invalid')\r\n                            .required('Material ID is required'),\r\n                    },\r\n                    {\r\n                        label: 'Quantity',\r\n                        field: 'quantity',\r\n                        type: 'number',\r\n                        validation: Yup.number().min(1).required('Quantity is required'),\r\n                    },\r\n                    {\r\n                        label: 'Factory Date',\r\n                        field: 'factoryDate',\r\n                        type: 'date',\r\n                    },\r\n                    {\r\n                        label: 'Total Value',\r\n                        field: 'totalValue',\r\n                        type: 'number',\r\n                        validation: Yup.number()\r\n                            // .positive('Invalid total value')\r\n                            .required('Total Value is required'),\r\n                    },\r\n                ]}\r\n                submitFunction={(values) => createNewRecipe(values)}\r\n            />\r\n            <CustomModalDetail detailData={detailData}></CustomModalDetail>\r\n            <CardHeader\r\n                pageCount={pageCount}\r\n                paginateFunction={paginate}\r\n                modalID={'#importRecipeModal'}\r\n                buttonName={'Create new recipe'}\r\n            />\r\n\t\t\t<div className=\"card-body\">\r\n\t\t\t\t<CustomTable\r\n\t\t\t\t\tdata={imExRecipeList}\r\n\t\t\t\t\tactions={{\r\n\t\t\t\t\t\tdetail: getDetail,\r\n\t\t\t\t\t}}\r\n\t\t\t\t\thiddenFields={['id', 'createdBy', 'updatedBy', 'updatedAt', 'responsibleBy']}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}