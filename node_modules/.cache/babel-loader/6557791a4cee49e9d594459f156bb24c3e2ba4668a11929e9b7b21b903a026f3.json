{"ast":null,"code":"var _jsxFileName = \"E:\\\\project-exam\\\\eProject---SEM-2\\\\src\\\\pages\\\\cms\\\\accountant\\\\recipe\\\\ImExRecipe.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport ImExRecipeService from '../../../../services/accountantService/ImExRecipeService';\nimport ServiceMethods from '../../../../utils/ServiceMethods';\nimport * as Yup from 'yup';\nimport CustomTable from '../../../../components/custom-table/CustomTable';\nimport CardHeader from '../../../../components/card-header/CardHeader';\nimport CustomModalDetail from '../../../../components/custom-modal/CustomModalDetail';\nimport CustomModalForm from '../../../../components/custom-modal/CustomModalForm';\nimport Toast from '../../../../components/toast-message/ToastMessage';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ImExRecipe({\n  repType\n}) {\n  _s();\n  const [imExRecipeList, setImExRecipeList] = useState([]);\n  const [pageCount, setPageCount] = useState(null);\n  const [detailData, setDetailData] = useState(null);\n  const user = JSON.parse(localStorage.getItem('user'));\n  const [pagination, setPagination] = useState({\n    page: 0,\n    size: 10\n  });\n  const paginate = ({\n    selected\n  }) => {\n    setPagination({\n      page: selected,\n      size: 10\n    });\n  };\n  useEffect(() => {\n    getRecipeList();\n  }, [pagination]);\n  const getRecipeList = async page => {\n    try {\n      const response = await ImExRecipeService.getList(page, repType);\n      if (response.success) {\n        setImExRecipeList(response.data);\n        setPageCount(Math.ceil(response.data.length / pagination.size));\n      } else {\n        Toast.error(response.message);\n      }\n    } catch (error) {\n      Toast.error(error);\n    }\n  };\n  const createNewRecipe = async data => {\n    await ServiceMethods.add(ImExRecipeService.createNew, data, getRecipeList);\n  };\n  const getDetail = async id => {\n    const data = await ServiceMethods.detail(ImExRecipeService.getDetail, id);\n    setDetailData(data);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CustomModalForm, {\n      title: 'Import recipe',\n      properties: [{\n        label: 'Responsible By',\n        field: 'responsibleBy',\n        type: 'number',\n        validation: Yup.number().required('Responsible By is required'),\n        className: 'col-md-6'\n      }, {\n        label: 'Rep type',\n        field: 'repType',\n        type: 'text',\n        validation: Yup.string().required('Report Type is required'),\n        className: 'col-md-6'\n      }, {\n        label: 'Supplier',\n        field: 'supplier',\n        type: 'text',\n        validation: Yup.string().required('Supplier is required'),\n        className: 'col-md-6'\n      }, {\n        label: 'Purpose',\n        field: 'purpose',\n        type: 'text',\n        validation: Yup.string().required('purpose is required'),\n        className: 'col-md-6'\n      }, {\n        label: 'Description',\n        field: 'description',\n        type: 'text-area',\n        className: 'col-md-12'\n      }],\n      modalID: \"importRecipeModal\",\n      tableFieldName: \"detailList\",\n      detailProperties: [{\n        label: 'Material ID',\n        field: 'materialId',\n        type: 'number',\n        validation: Yup.number().positive('Material ID is invalid').required('Material ID is required')\n      }, {\n        label: 'Quantity',\n        field: 'quantity',\n        type: 'number',\n        validation: Yup.number().min(1).required('Quantity is required')\n      }, {\n        label: 'Factory Date',\n        field: 'factoryDate',\n        type: 'date',\n        validation: Yup.date().required('Factory Date is required')\n      }, {\n        label: 'Total Value',\n        field: 'totalValue',\n        type: 'number',\n        validation: Yup.number().positive('Invalid total value').required('Total Value is required')\n      }],\n      submitFunction: values => createNewRecipe(values)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(CustomModalDetail, {\n      detailData: detailData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(CardHeader, {\n      pageCount: pageCount,\n      paginateFunction: paginate,\n      modalID: '#importRecipeModal',\n      buttonName: 'Create new recipe'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: /*#__PURE__*/_jsxDEV(CustomTable, {\n        data: imExRecipeList,\n        actions: {\n          detail: getDetail\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n_s(ImExRecipe, \"PA0w6uAWlpK0/7NBJgZLIoue8ZQ=\");\n_c = ImExRecipe;\nvar _c;\n$RefreshReg$(_c, \"ImExRecipe\");","map":{"version":3,"names":["useEffect","useState","ImExRecipeService","ServiceMethods","Yup","CustomTable","CardHeader","CustomModalDetail","CustomModalForm","Toast","jsxDEV","_jsxDEV","Fragment","_Fragment","ImExRecipe","repType","_s","imExRecipeList","setImExRecipeList","pageCount","setPageCount","detailData","setDetailData","user","JSON","parse","localStorage","getItem","pagination","setPagination","page","size","paginate","selected","getRecipeList","response","getList","success","data","Math","ceil","length","error","message","createNewRecipe","add","createNew","getDetail","id","detail","children","title","properties","label","field","type","validation","number","required","className","string","modalID","tableFieldName","detailProperties","positive","min","date","submitFunction","values","fileName","_jsxFileName","lineNumber","columnNumber","paginateFunction","buttonName","actions","_c","$RefreshReg$"],"sources":["E:/project-exam/eProject---SEM-2/src/pages/cms/accountant/recipe/ImExRecipe.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport ImExRecipeService from '../../../../services/accountantService/ImExRecipeService';\r\nimport ServiceMethods from '../../../../utils/ServiceMethods';\r\nimport * as Yup from 'yup';\r\nimport CustomTable from '../../../../components/custom-table/CustomTable';\r\nimport CardHeader from '../../../../components/card-header/CardHeader';\r\nimport CustomModalDetail from '../../../../components/custom-modal/CustomModalDetail';\r\nimport CustomModalForm from '../../../../components/custom-modal/CustomModalForm';\r\nimport Toast from '../../../../components/toast-message/ToastMessage';\r\n\r\nexport default function ImExRecipe({ repType }) {\r\n\tconst [imExRecipeList, setImExRecipeList] = useState([]);\r\n\tconst [pageCount, setPageCount] = useState(null);\r\n\tconst [detailData, setDetailData] = useState(null);\r\n\tconst user = JSON.parse(localStorage.getItem('user'));\r\n\tconst [pagination, setPagination] = useState({\r\n\t\tpage: 0,\r\n\t\tsize: 10,\r\n\t});\r\n\r\n\tconst paginate = ({ selected }) => {\r\n\t\tsetPagination({\r\n\t\t\tpage: selected,\r\n\t\t\tsize: 10,\r\n\t\t});\r\n\t};\r\n\tuseEffect(() => {\r\n\t\tgetRecipeList();\r\n\t}, [pagination]);\r\n\r\n\tconst getRecipeList = async (page) => {\r\n\t\ttry {\r\n\t\t\tconst response = await ImExRecipeService.getList(page, repType);\r\n\t\t\tif (response.success) {\r\n\t\t\t\tsetImExRecipeList(response.data);\r\n\t\t\t\tsetPageCount(Math.ceil(response.data.length / pagination.size));\r\n\t\t\t} else {\r\n\t\t\t\tToast.error(response.message);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tToast.error(error);\r\n\t\t}\r\n\t};\r\n\r\n\tconst createNewRecipe = async (data) => {\r\n\t\tawait ServiceMethods.add(ImExRecipeService.createNew, data, getRecipeList);\r\n\t};\r\n\r\n\tconst getDetail = async (id) => {\r\n\t\tconst data = await ServiceMethods.detail(ImExRecipeService.getDetail, id);\r\n\t\tsetDetailData(data);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<CustomModalForm\r\n\t\t\t\ttitle={'Import recipe'}\r\n\t\t\t\tproperties={[\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'Responsible By',\r\n\t\t\t\t\t\tfield: 'responsibleBy',\r\n\t\t\t\t\t\ttype: 'number',\r\n\t\t\t\t\t\tvalidation: Yup.number().required('Responsible By is required'),\r\n\t\t\t\t\t\tclassName: 'col-md-6',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'Rep type',\r\n\t\t\t\t\t\tfield: 'repType',\r\n\t\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\t\tvalidation: Yup.string().required('Report Type is required'),\r\n\t\t\t\t\t\tclassName: 'col-md-6',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'Supplier',\r\n\t\t\t\t\t\tfield: 'supplier',\r\n\t\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\t\tvalidation: Yup.string().required('Supplier is required'),\r\n\t\t\t\t\t\tclassName: 'col-md-6',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'Purpose',\r\n\t\t\t\t\t\tfield: 'purpose',\r\n\t\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\t\tvalidation: Yup.string().required('purpose is required'),\r\n\t\t\t\t\t\tclassName: 'col-md-6',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'Description',\r\n\t\t\t\t\t\tfield: 'description',\r\n\t\t\t\t\t\ttype: 'text-area',\r\n\t\t\t\t\t\tclassName: 'col-md-12',\r\n\t\t\t\t\t},\r\n\t\t\t\t]}\r\n\t\t\t\tmodalID=\"importRecipeModal\"\r\n\t\t\t\ttableFieldName=\"detailList\"\r\n\t\t\t\tdetailProperties={[\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'Material ID',\r\n\t\t\t\t\t\tfield: 'materialId',\r\n\t\t\t\t\t\ttype: 'number',\r\n\t\t\t\t\t\tvalidation: Yup.number()\r\n\t\t\t\t\t\t\t.positive('Material ID is invalid')\r\n\t\t\t\t\t\t\t.required('Material ID is required'),\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'Quantity',\r\n\t\t\t\t\t\tfield: 'quantity',\r\n\t\t\t\t\t\ttype: 'number',\r\n\t\t\t\t\t\tvalidation: Yup.number().min(1).required('Quantity is required'),\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'Factory Date',\r\n\t\t\t\t\t\tfield: 'factoryDate',\r\n\t\t\t\t\t\ttype: 'date',\r\n\t\t\t\t\t\tvalidation: Yup.date().required('Factory Date is required'),\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'Total Value',\r\n\t\t\t\t\t\tfield: 'totalValue',\r\n\t\t\t\t\t\ttype: 'number',\r\n\t\t\t\t\t\tvalidation: Yup.number()\r\n\t\t\t\t\t\t\t.positive('Invalid total value')\r\n\t\t\t\t\t\t\t.required('Total Value is required'),\r\n\t\t\t\t\t},\r\n\t\t\t\t]}\r\n\t\t\t\tsubmitFunction={(values) => createNewRecipe(values)}\r\n\t\t\t/>\r\n\t\t\t<CustomModalDetail detailData={detailData}></CustomModalDetail>\r\n\t\t\t<CardHeader\r\n\t\t\t\tpageCount={pageCount}\r\n\t\t\t\tpaginateFunction={paginate}\r\n\t\t\t\tmodalID={'#importRecipeModal'}\r\n\t\t\t\tbuttonName={'Create new recipe'}\r\n\t\t\t/>\r\n\t\t\t<div className=\"card-body\">\r\n\t\t\t\t<CustomTable\r\n\t\t\t\t\tdata={imExRecipeList}\r\n\t\t\t\t\tactions={{\r\n\t\t\t\t\t\tdetail: getDetail,\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}